type Query {
    getAccount(id: ID!): Account
    getTransactions(accountId: ID!): [Transaction]
}

type Mutation {
    createAccount(accountName: String!, accountType: AccountType!, balance: String!): CreateAggregatePayload!
    increaseBalance(id: ID!, amount: String): Boolean
    withdrawBalance(id: ID!, amount: String, category: BudgetCategory): Boolean
    transferMoney(from: ID!, to: ID!, amount: String): Boolean
    linkAccount(accountId: ID!, familyId: ID!): Boolean
}

type Account {
    id: ID
    name: String
    accountType: AccountType
    balance: String
    family: Family
    transactions: [Transaction]
}

enum AccountType {
    DEBIT,
    SAVING,
    CREDIT
}

type Transaction {
    type: String
    amount: Float
    occurredAt: String
    description: String
}

type CreateAggregatePayload {
    ok: ID
    error: ErrorResponse
}

type ErrorResponse {
    errorCode: String
    message: String
}